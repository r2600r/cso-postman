{
	"info": {
		"_postman_id": "b3c80555-7cee-4877-90df-26703c99de7a",
		"name": "CSO App ID",
		"description": "* * *\n\nCopyright 2022 Juniper Networks, Inc. All rights reserved.\n\nauthor: Patrik Bok\n\nLicensed under the Juniper Networks Script Software License (the \"License\").  \nYou may not use this script file except in compliance with the License, which is located at  \n[http://www.juniper.net/support/legal/scriptlicense/](http://www.juniper.net/support/legal/scriptlicense/)  \nUnless required by applicable law or otherwise agreed to in writing by the parties, software  \ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n* * *\n\nThis API call will check gather devices detail and check if Micro-App has been enabled previously during IDP signature update and what IDP signature each device contains.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "via single POST",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function cleanup() {",
									"    const clean = _.keys(pm.collectionVariables.toObject())",
									"    _.each(clean, (arrItem) => {",
									"        pm.collectionVariables.unset(arrItem);",
									"    })",
									"}",
									"console.log('Cleaning collection variables ...', cleanup());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set(\"token\", postman.getResponseHeader(\"X-Subject-Token\"));",
									"console.log(`Got Token: ${pm.environment.get('token')}`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"auth\": {\r\n\t\"identity\": {\r\n\t\t\"methods\": [\"password\"],\r\n\t\t\"password\": {\r\n\t\t\t\"user\": {\r\n\t\t\t\t\"domain\": {\r\n\t\t\t\t\t\"id\": \"default\"\r\n\t\t\t\t},\r\n\t\t\t\t\"name\": \"{{user_name}}\",\r\n\t\t\t\t\"password\": \"{{password}}\"\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\t\"scope\": {\r\n     \"project\": {\r\n       \"domain\": {\r\n         \"id\": \"default\"\r\n       },\r\n       \"name\": \"{{tenant_name}}\"\r\n     }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{base_url}}/v3/auth/tokens",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v3",
								"auth",
								"tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "CSO-get_all_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"function clean_up() {",
									"    const clean = _.keys(pm.collectionVariables.toObject())",
									"    _.each(clean, (arrItem) => {",
									"        pm.collectionVariables.unset(arrItem);",
									"    })",
									"}",
									"",
									"if (pm.response.code == 200 ) {",
									"    _.each(jsonData.device, (device) => {",
									"        _.each(device.signature_settings, (item) => {",
									"            if (item.option == 'Enable Micro apps' && item.value == true) {",
									"                console.warn(`Site ${device.site_name} has Micro-app enabled ...`);",
									"                pm.test(`Site ${device.site_name} has Micro-app enabled ...`, function () {",
									"                    pm.expect.fail();",
									"                });",
									"            }        ",
									"        })    ",
									"        version = pm.collectionVariables.get('idp_ver-' + device.signature_version);",
									"        if(version && JSON.parse(version).length > 0) {",
									"            //console.info(`Type of coll_var_idp: ${typeof pm.collectionVariables.get('idp_ver-' + jsonData.device.signature_version)} `);         ",
									"            version = JSON.parse(version);",
									"            version.push(device.site_name);",
									"            pm.collectionVariables.set('idp_ver-' + device.signature_version, JSON.stringify(version));",
									"        }",
									"        else {",
									"            let version = [];",
									"            version.push(device.site_name);",
									"            pm.collectionVariables.set('idp_ver-' + device.signature_version, JSON.stringify(version));",
									"        }",
									"    })",
									"}",
									"",
									"// Find and print all IDP versions",
									"const all_variables = _.keys(pm.collectionVariables.toObject())",
									"_.each(all_variables, (arrItem) => {",
									"    if (arrItem.includes('idp_ver-')) {",
									"        version = arrItem.replace('idp_ver-', '');",
									"        console.info(`IDP version ${version}: `, JSON.parse(pm.collectionVariables.get(arrItem)));",
									"        pm.test(`IDP version ${version}: ${JSON.parse(pm.collectionVariables.get(arrItem))}`, function () {",
									"            pm.expect(pm.response.code).to.equal(200);",
									"        });",
									"",
									"    }",
									"})",
									"",
									"clean_up();",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"org_sites = pm.collectionVariables.get('org_sites');",
									"if(org_sites && JSON.parse(org_sites).length > 0) {",
									"    sites =JSON.parse(org_sites);",
									"    var current_site_uuid = sites.shift();",
									"    if (typeof current_site_uuid !== 'undefined') {pm.collectionVariables.set(\"site_uuid\", current_site_uuid); }",
									"    pm.collectionVariables.set(\"org_sites\", JSON.stringify(sites));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": {\n    \"bool\": {\n      \"must\": [\n        {\n          \"terms\": {\n            \"device_type._raw\": [\n              \"cpe\"\n            ]\n          }\n        }\n      ],\n      \"should\": [],\n      \"must_not\": [\n        {\n          \"term\": {\n            \"detach_state._raw\": \"SUCCESS\"\n          }\n        },\n        {\n          \"term\": {\n            \"device_redundancy_role._raw\": \"PRIMARY_MEMBER\"\n          }\n        },\n        {\n          \"terms\": {\n            \"hub_capabilities._raw\": [\n              \"OAM_ONLY\",\n              \"DATA_ONLY\",\n              \"OAM_AND_DATA\"\n            ]\n          }\n        }\n      ]\n    }\n  },\n  \"from\": 0,\n  \"size\": 5000,\n  \"sort\": [\n    {\n      \"last_modified._raw\": {\n        \"order\": \"desc\"\n      }\n    }\n  ],\n  \"detail\": true\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/data-view-central/device/_filter",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"data-view-central",
								"device",
								"_filter"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "x-auth-token",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}